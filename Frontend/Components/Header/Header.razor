@using Frontend.Services
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject CustomAuthenticationStateProvider _customAuthenticationStateProvider
@inject NavigationManager _navigation

<div class="top-row">
    <div class="title">
        <nav class="nav-buttons">
            <h1>
                <img src="/Image/favicon.png" alt="Logo" />
                <a href="/">Express</a>
            </h1>
        </nav>
    </div>

    <div class="search-container">
        <input type="text" class="search-input" placeholder="Buscar..." @bind="searchQuery" />
        <button class="search-button" @onclick="Search">Buscar</button>
    </div>

    <nav class="nav-buttons">
        <AuthorizeView>
            <NotAuthorized>
                <a href="/ingreso">Ingresar</a>
                <a href="/registro">Registrarse</a>
            </NotAuthorized>
            <Authorized>
                <a class="nav-user-name" href="/perfil">@userName</a> 
                <a href="/" @onclick="LogoutAsync">Cerrar sesión</a>
            </Authorized>
        </AuthorizeView>

    </nav>
</div>

@code {
    private string? userName;
    private bool isAuthenticated;
    private bool _isUpdatingUserInfo = false;

    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _customAuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
        await UpdateUserInfo();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateUserInfo();
        StateHasChanged();
    }

    private async Task UpdateUserInfo()
    {
        if (_isUpdatingUserInfo) return; 
        _isUpdatingUserInfo = true;

        try
        {
            Console.WriteLine("Actualizando información del usuario...");
            var authState = await _customAuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            isAuthenticated = user.Identity?.IsAuthenticated == true;
            userName = isAuthenticated ? user.FindFirst(ClaimTypes.GivenName)?.Value ?? "Usuario" : string.Empty;
        }
        finally
        {
            _isUpdatingUserInfo = false;
        }
    }

    public async Task LogoutAsync()
    {
        await _customAuthenticationStateProvider.MarkUserAsLoggedOutAsync();
        _navigation.NavigateTo("/ingreso");
        
        await UpdateUserInfo();
        StateHasChanged();
    }

    private void Search()
    {
        // Lógica de búsqueda
        Console.WriteLine($"Buscando: {searchQuery}");
    }

    public void Dispose()
    {
        _customAuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
